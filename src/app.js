// Generated by CoffeeScript 1.10.0
(function() {
  var LevelStore, app, authCheck, bodyparser, express, levelup, morgan, session, users;

  express = require('express');

  app = express();

  levelup = require('levelup');

  session = require('express-session');

  LevelStore = require('level-session-store')(session);

  morgan = require('morgan');

  bodyparser = require('body-parser');

  users = require('./users');

  app.use(bodyparser.json());

  app.use(bodyparser.urlencoded());

  app.set('port', 1889);

  app.set('views', __dirname + "/../views");

  app.set('view engine', 'jade');

  app.use('/', express["static"](__dirname + "/../public"));

  app.use(require('body-parser')());

  app.use(session({
    secret: '35ktqG6A1RFitUdYA1RFceaqQtqGlA1RFW0jBIA1RFtqG',
    store: new LevelStore('./db/sessions'),
    resave: true,
    saveUninitialized: true
  }));

  authCheck = function(req, res, next) {
    if (req.session.loggedIn !== true) {
      req.session.loggedIn = false;
      res.locals.connected = false;
      req.session.user = null;
      if (req.url === '/signup') {
        return res.render('signup');
      } else {
        return res.render('login');
      }
    } else {
      req.session.loggedIn = true;
      res.locals.connected = true;
      res.locals.user = req.session.user;
      return next();
    }
  };

  app.get('/logout', function(req, res) {
    req.session.loggedIn = false;
    req.session.user = null;
    res.locals.connected = false;
    return res.render('login');
  });

  app.get('/', authCheck, function(req, res) {
    return res.render('login');
  });

  app.get('/my-metrics', authCheck, function(req, res) {
    console.log("req.session.user = " + req.session.user);
    return res.render('my_metrics');
  });

  app.get('/users.json', function(req, res) {
    return users.get(function(err, users) {
      return res.status(200).json(users);
    });
  });

  app.get('/hello/:name', authCheck, function(req, res) {
    return res.status(200).send(req.params.name);
  });

  app.post('/my-metrics', authCheck, function(req, res) {
    var myDate, myDate2, newDate, username;
    username = req.session.user;
    myDate = req.body.date;
    myDate.split("-");
    newDate = myDate[1] + "/" + myDate[0] + "/" + myDate[2];
    myDate2 = Date(newDate).getTime();
    return console.log(myDate2);
  });


  /*
    db.put_metrics timestamp, req.body.value
    db.put_association username, timestamp
   */

  app.post('/metric/:id.json', authCheck, function(req, res) {
    return db.save(req.params.id, req.body, function(err) {
      if (err) {
        return res.status(500).json(err);
      } else {
        return res.status(200).send("Metrics saved");
      }
    });
  });

  app.get('/login', function(req, res) {
    return res.render('login');
  });

  app.get('/signup', authCheck, function(req, res) {
    return res.render('signup');
  });

  app.post('/signup', function(req, res) {
    return users.save(req.body.user, req.body.pass, function(err, data) {
      if (err) {
        throw error;
      } else {
        return res.redirect('/');
      }
    });
  });

  app.post('/login', function(req, res) {
    return users.check(req.body.user, function(err, data) {
      if (err) {
        throw error;
      }
      console.log("data.user = " + data.user + ", data.pass = " + data.pass);
      if (req.body.pass === data.pass) {
        console.log("user authenticated");
        res.locals.connected = true;
        req.session.loggedIn = true;
        req.session.user = req.body.user;
        res.locals.user = req.body.user;
        return res.render('my_metrics');
      } else {
        console.log("user not authenticated");
        res.locals.connected = false;
        req.session.loggedIn = false;
        req.session.user = null;
        res.locals.error_login = true;
        return res.render('login');
      }
    });
  });


  /*
    if req.body.user == "admin" and req.body.pass == "password"
      res.locals.connected = true
      req.session.loggedIn = true
      req.session.user = req.body.user
      res.locals.user = req.body.user
      res.render 'my_metrics'
    else
      res.locals.connected = false
      req.session.loggedIn = false
      req.session.user = null
      res.locals.error_login = true
      res.render 'login'
   */

  app.listen(app.get('port'), function() {
    return console.log("listening on " + (app.get('port')));
  });

}).call(this);

//# sourceMappingURL=app.js.map
